'use strict';

(function(basicDataCollector, cookiesManager, taskManager, postman){
  var nightsWatcher = (function(basicDataCollector, cookiesManager, taskManager, postman){

    /**
     * contains:
     *  watcher.user = {
     *     Platform: String,
     *     Browser: String,
     *     Language: String,
     *     Country: String,
     *     City: String,
     *     Region: String,
     *     UserId: String,
     *     JoinDate: Int
     *  }
     *  watcher.visit = {
     *     Time: String,
     *     UserId: String,
     *     Site: String,
     *     VisitId: //need to be generated by server
     *  }
     *  watcher
     * @type {{}}
     */
    var watcher = {
      user: null,
      visit: {},
      events: [],
      configObj:{}
    };

    /**
     * require
     * @param configObject
     */
    watcher.config = function(configObject){
      watcher.configObj = configObject;
    };

    watcher.identify = function(arg1, arg2){
      taskManager.addAsyncTask(function(arg1, arg2){
        var obj = {
          Platform: basicDataCollector.browser.platform,
          Browser: basicDataCollector.browser.type,
          Language: basicDataCollector.browser.language,
          Country: basicDataCollector.geoLocation.country,
          City: basicDataCollector.geoLocation.city,
          Region: basicDataCollector.geoLocation.region
        };
        if(typeof arg1 === 'function'){
          watcher.user = obj;
          arg1(obj);
        }else{
          if(arg1==='user'){
            obj.UserId = cookiesManager.currentUser;
            obj.JoinDate = cookiesManager.joindate;
            watcher.user = obj;
            watcher.visit.UserId = obj.UserId;
            arg2(obj, cookiesManager.userType);
          }
        }
        taskManager.finishAsyncTask();
      }, null, [arg1, arg2]);
    };

    /**
     * store the start event
     * @param directive
     * @param callback
     */
    watcher.on = function(directive, callback){
      if(directive==='visitingStart'){
        var startDate = new Date().getTime();
        watcher.visit = {
          Time: startDate,
          Site: basicDataCollector.browser.url[3]
        };
        callback(watcher.visit);
      }
    };

    watcher.track = function(element, event, callback){
      basicDataCollector.interaction(element, event, function(trackedEvent){
        trackedEvent.UserId = watcher.user.UserId;
        watcher.events.push(trackedEvent);
        callback(trackedEvent);
      });
    };

    watcher.run = function(){
      taskManager.addAsyncTask(function(){
        var self = this;
        self.user.type = 1;
        self.user.token = self.configObj.domainToken;

        self.visit.type =2;
        self.visit.token = self.configObj.domainToken;
        postman.get(self.configObj.server, self.user, function(data){
          postman.get(self.configObj.server, self.visit, function(data){
            self.visit.VisitId = data._id;
            taskManager.finishAsyncTask();
          });
        });
      }, watcher);

      taskManager.addAsyncTask(function(){
        var self = this;
        self.events.push({
          Type: "viewpage",
          Time: new Date().getTime(),
          Domain: basicDataCollector.browser.url[3],
          Path: basicDataCollector.browser.url[5],
          Hash: basicDataCollector.browser.url[7] || "",
          Query: basicDataCollector.browser.url[6] || "",
          UserId: self.user.UserId,
          TargetTag: "",
          TargetId: "",
          TargetClass: "",
          InnerContent: ""
        });
        taskManager.finishAsyncTask();
      }, watcher);

      taskManager.addAsyncTask(function(){
        var self = this;
        setInterval(function(){
          for(var i=0;  i < self.events.length; i++){
            self.events[i].VisitId = self.visit.VisitId || "";
          }
          postman.get(self.configObj.server, {type:3, token:self.configObj.domainToken, data:JSON.stringify(self.events)}, function(data){
            self.events = [];
            taskManager.finishAsyncTask();
          });
        }, 1000*2);
        taskManager.finishAsyncTask();
      }, watcher);
      taskManager.asyncTaskExec();
    };
    return watcher;
  })(basicDataCollector, cookiesManager, taskManager, postman);

  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
    module.exports = nightsWatcher;
  }
  else {
    if (typeof define === 'function' && define.amd) {
      define([], function() {
        return nightsWatcher;
      });
    }
    else {
      window.nightsWatcher = nightsWatcher;
    }
  }
})(basicDataCollector, cookiesManager, taskManager, postman);